#!/usr/bin/python
# get-code.py
#
# Description
# Simple poython script used to deobfuscate malware scripts where a simple
# substitution is used to construct arguments. The key value pairs must be
# supplies in an equal separated file and the code in a separate file. The
# script parses the substitution values into a dictionary and then parses the
# program file and prints the results to stdout. This may be redirected to a
# file
#
# Known Issues:
# * Use of immutable strings to construct the results, to be replaced
#
import sys
import os.path

def print_usage():
  print "python ", sys.argv[0], " <keys> <code>"
  print "keys - file containing '=' separated key value pairs"
  print "code - file containing obfuscated code"

if len(sys.argv) != 3 or not os.path.isfile(sys.argv[1]) or not os.path.isfile(sys.argv[2]):
  print_usage()
  sys.exit()

dict_key_val = {}
with open(sys.argv[1], 'r') as file_key_val:
  for line_key_val in file_key_val:
    (key, sign, val) = line_key_val.partition( '=' )
    dict_key_val[key.strip()] = val.strip().strip('"')
    #print key, "=", val 

with open(sys.argv[2], 'r') as file_call:
  for line_call in file_call:
    results = ''
    for word in line_call.split(' '):
      if word != '&':
        word = word.strip()
        found = dict_key_val.get(word)
        if found is not None:
          results += found
        else:
          results += word
    print results
