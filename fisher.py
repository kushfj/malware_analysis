#!/us/bin/python

import re
from msg_parser import MsOxMessage
from msg_parser import msg_parser 
from urlparse import urlparse

msg_obj = MsOxMessage("test.msg")
if msg_obj.is_valid_msg_file():
  json_str  = msg_obj.get_message_as_json()
  prop_dict = msg_obj.get_properties()

  #print(prop_dict.keys())
  #['attachments', 'SentRepresentingAddressType', 'NormalizedSubject', 'Conversatio nIndex', 'LastModifierName', 'SenderSearchKey', 'CreatorEntryId', 'SentRepresent ingEntryId', 'Body', 'SentRepresentingEmailAddress', 'TransportMessageHeaders', 'AddressBookFolderPathname', 'SentRepresentingName', 'SentRepresentingSmtpAddres s', 'BodyContentId', 'SenderName', 'recipients', 'AddressBookHomeMessageDatabase ', 'MimeSkeleton', 'RtfCompressed', 'LastModifierEntryId', 'MessageClass', 'Sear chKey', 'DisplayTo', 'CreatorName', 'SentRepresentingSearchKey', 'SenderSmtpAddr ess', 'SenderEmailAddress', 'SenderEntryId', 'SenderAddressType', 'InternetMessa geId', 'ConversationTopic', 'AddressBookManagerDistinguishedName', 'Subject']

  #'Body', 
  #'recipients', 

  #print(json_str)
  #print(prop_str)

  hdr_obj  = prop_dict.get('TransportMessageHeaders') 
  hdr_dict = msg_parser.parse_email_headers(hdr_obj)

  #print(hdr_dict.keys())
  # ['X-IronPort-Reputation', 'From', 'X-IronPort-SenderGroup', 'IronPort-SDR', 'X-I ronPort-MailFlowPolicy', 'To', 'Message-ID', 'Content-Type', 'IronPort-PHdr', 'X -Amp-Result', 'X-IronPort-RemoteIP', 'CC', 'Date', 'Received', 'Received-SPF', ' Authentication-Results', 'X-IronPort-Anti-Spam-Filtered', 'X-IronPort-MID', 'Rep ly-To', 'BCC', 'MIME-Version', 'X-IronPort-Listener', 'X-IPAS-Result', 'X-Amp-Fi le-Uploaded', 'X-IronPort-AV', 'DKIM-Signature', 'X-IronPort-Anti-Spam-Result', 'Subject']

  print("type:\t phish")
  print("tag:\t TLP:AMBER")
  ##print("subject:\t " + prop_dict.get("Subject"))
  #print("subject:\t" + prop_dict.get('NormalizedSubject'))
  #print("to:\t "     + prop_dict.get("DisplayTo"))
  ##print("sender:\t"  + prop_dict.get('SenderEmailAddress'))
  #print("sender name:\t" + prop_dict.get('SenderName'))
  #print("sender name:\t" + prop_dict.get('SentRepresentingSmtpAddress'))

  print("smtp-from:\t"    + prop_dict.get('SenderSmtpAddress'))
  print("envelop-from:\t" + "".join(hdr_dict.get('From')))
  print("to:\t"           + "".join(hdr_dict.get('To')))
  print("content-type:\t" + hdr_dict.get('Content-Type'))
  print("cc:\t"           + "".join(hdr_dict.get('CC')))
  print("date:\t"         + hdr_dict.get('Date'))
  print("recv:\t"         + hdr_dict.get('Received'))
  print("reply-to:\t"     + "".join(hdr_dict.get('Reply-To')))
  print("bcc:\t"          + "".join(hdr_dict.get('BCC')))
  print("subject:\t"      + hdr_dict.get('Subject'))

  body = prop_dict.get('Body') 

  urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', body.lower())
  for url in urls:
    parsed_url = urlparse(url)
    if not parsed_url.netloc.endswith('westpac.com.au'):
      print("url:\t"+url)

  ##print("[+] url:\t ")
  ##print("[+] ip:\t ")

else:
  print("[!] not a valid msg file")
